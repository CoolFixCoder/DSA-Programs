#include <iostream>
#include<deque>
#include<vector>
using namespace std;

//239. Sliding Window Maximum
//Complexity
//Time complexity : O(n)
//Space complexity : O(k)
//Except res.

std::vector<int> maxSlidingWindow(std::vector<int>& nums, int k) {
  std::vector<int> result;
  std::deque<int> deque;

  for(int idx=0;i<nums.size();++idx)
  {
    int num = nums[idx];
    while(!deque.empty() && deque.back() < num)
      deque.pop_back();

    deque.push_back(num);
    
    if( idx >= k && nums[idx-k] == deque.front())
      deque.pop_front();

    if ( idx >= k-1 )
        result.push_back(deque.front());   
  }
return result;
}

int main()
{
//Input: nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3
//Output : [3, 3, 5, 5, 6, 7]
    //std::vector<int> input{ 1, 3, -1, -3, 5, 3, 6, 7 };
    std::vector<int> input{ 3, 3, 3,3 };
    constexpr int k = 3;
    auto output = maxSlidingWindow(input, k);
    for (const auto& value : output)
        std::cout << value << std::endl;
    return 0;

}
